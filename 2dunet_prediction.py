# -*- coding: utf-8 -*-
"""2dUnet_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJsewXWlO-4GUti6zTTQ0-WGtd3HXbmi
"""

import os
import glob

import numpy as np

from sklearn.model_selection import train_test_split
import matplotlib.image as mpimg
from PIL import Image

import tensorflow as tf
import tensorflow.contrib as tfcontrib
from tensorflow.python.keras import models

import SimpleITK as sitk 
from preProcess import swapLabelsBack
from utils import getTrainNLabelNames



"""#Prediction"""

from preProcess import RescaleIntensity
def data_preprocess_test(image_vol_fn, view, size, m):
    img = sitk.ReadImage(image_vol_fn)
    image_vol = sitk.GetArrayFromImage(img)
    original_shape = image_vol.shape
    if m =="mr":
        image_vol = np.moveaxis(image_vol,0,-1)
 
    ori = img.GetOrigin()
    space = img.GetSpacing()
    direc = img.GetDirection()
    
    image_vol = RescaleIntensity(image_vol, m)
    shape = [size, size, size]
    shape[view] = image_vol.shape[view]
    image_vol_resize = resize(image_vol, tuple(shape))
    
    image_info = (ori, space, direc)
    
    return image_vol_resize, original_shape, image_info

from skimage.transform import resize
def predictVol(image_vol_fn, label_fn, modality, view,save_fn=None):
    im_vol, ori_shape, info = data_preprocess_test(image_vol_fn, view, 256, modality)
    im_vol = np.moveaxis(im_vol,view,0)
    predicted_label = np.argmax(model.predict(np.expand_dims(im_vol,axis=-1)),axis=-1)
    predicted_label = np.moveaxis(predicted_label,0,view)
    print("ck")
    if modality=="mr":
      predicted_label = np.moveaxis(predicted_label,-1,0)
      print(predicted_label.shape)
    predicted_label = resize(predicted_label.astype(np.float), ori_shape, order=0)
    print(predicted_label.shape) 
    labels = sitk.GetArrayFromImage(sitk.ReadImage(label_fn))
    print(labels.shape)
    labels[labels==421]=420
    predicted_label = swapLabelsBack(labels,predicted_label)
    if save_fn:
      ori, space, direc = info
      out_im = sitk.GetImageFromArray(predicted_label)
      out_im.SetOrigin(ori)
      out_im.SetSpacing(space)
      out_im.SetDirection(direc)
      
      sitk.WriteImage(out_im, save_fn)
    return predicted_label, labels

"""#Compute Dice Scores"""

from scipy.spatial.distance import dice
def dice_score(pred, true):
  pred = pred.astype(np.int)
  true = true.astype(np.int)  
  num_class = np.unique(true)
  dice_out = [None]*len(num_class)
  
  for i in range(len(num_class)):
    pred_i = pred==num_class[i]
    true_i = true==num_class[i]
    sim = 1 - dice(pred_i.reshape(-1), true_i.reshape(-1))
    dice_out[i] = sim
    
  return dice_out


def writeDiceScores(csv_path, x_train_filenames ,y_train_filenames, modality, view): 
  import csv
  with open(csv_path, 'w') as writeFile:
    writer = csv.writer(writeFile)
    writer.writerow( ('Bg 0', 'myo 205', 'la 420', 'lv 500', 'ra 550', 'rv 600', 'aa 820', 'pa 850') )
    for i in range(len(x_train_filenames)):
      print("processing image volume %s" % x_train_filenames[i])
      predicted_label, labels = predictVol(x_train_filenames[i],y_train_filenames[i],modality, view)
      dice_out = dice_score(predicted_label, labels)
      writer.writerow(tuple(dice_out))
      print(dice_out)
  
  writeFile.close()

def writePredictedMask(data_out_folder, modality, data_folder, view):
  for m in modality:
    for subject_dir in sorted(glob.glob(os.path.join(data_folder,m+'_test','*.nii.gz'))):
      in_filename = os.path.realpath(subject_dir)
      out_filename = os.path.join(data_out_folder, os.path.basename(subject_dir))
      _,_ = predictVol(in_filename,y_train_filenames[0],m, view,out_filename)
      print(in_filename,out_filename)


from loss import bce_dice_loss, dice_loss
modality = ["mr","ct"]
view = 1
data_folder = '/global/scratch/fanwei_kong/ImageData/MMWHS_small'
data_out_folder = '/global/scratch/fanwei_kong/2DUNet/Logs/prediction'
try:
  os.mkdir(data_out_folder)
except Exception as e: print(e)


save_model_path = '/global/scratch/fanwei_kong/2DUNet/Logs/weights_multi-all-coronal.hdf5'
model = models.load_model(save_model_path, custom_objects={'bce_dice_loss': bce_dice_loss, 'dice_loss': dice_loss})


for m in modality:
  x_train_filenames = []
  y_train_filenames = []
  for subject_dir in sorted(glob.glob(os.path.join(data_folder,m+'_test','*.nii.gz'))):
      x_train_filenames.append(os.path.realpath(subject_dir))
  for subject_dir in sorted(glob.glob(os.path.join(data_folder ,m+'_test_masks','*.nii.gz'))):
      y_train_filenames.append(os.path.realpath(subject_dir))
  print("Number of testing volumes %d" % len(x_train_filenames))
  print("Number of mask volumes %d" % len(y_train_filenames))

  csv_path = '/global/scratch/fanwei_kong/2DUNet/Logs/%s_test.csv' % m 
  writeDiceScores(csv_path, x_train_filenames ,y_train_filenames, m , view)

writePredictedMask(data_out_folder, modality, data_folder, view)
